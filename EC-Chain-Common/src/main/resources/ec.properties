# Announce my IP address/hostname to peers and allow them to share it with other peers. If disabled, peer networking servlet will not be started at all.
ec.shareMyAddress=true
# Port for incoming peer to peer networking requests, if enabled.
ec.peerServerPort=7874
# Enable UPnP for the peer port.
ec.enablePeerUPnP=true
# Host interface on which to listen for peer networking requests, default all
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
ec.peerServerHost=0.0.0.0
# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to peers, and may be different from ec.peerServerPort (useful if you do port forwarding behind a router).
ec.myAddress=
# My platform, to be announced to peers.
ec.myPlatform=
# My hallmark, if available.
ec.myHallmark=
# Default initial peers. Only used if ec.usePeersDb=true.
# Do not modify. Add custom peers to ec.wellKnownPeers instead.
#ec.defaultPeers=47.92.5.137;14.147.106.104;
ec.defaultPeers=47.92.5.137;
# A list of well known peer addresses / host names, separated by '; '.
# These peers are always kept in connected state.
ec.wellKnownPeers=47.92.5.137;
# Known bad peers to be blacklisted.
ec.knownBlacklistedPeers=
# Default initial peers used for testnet only. Only used if ec.usePeersDb=true.
# Do not modify. Add custom testnet peers to ec.testnetPeers instead.
ec.defaultTestnetPeers=
# Well known testnet peers.
ec.testnetPeers=
# Maximum number of inbound connections.
ec.maxNumberOfInboundConnections=250
# Maximum number of outbound connections.
ec.maxNumberOfOutboundConnections=50
# Maintain active connections with at least that many peers.
ec.maxNumberOfConnectedPublicPeers=20
# Stop adding new peers when number of known peers exceeds that many.
ec.maxNumberOfKnownPeers=2000
# Stop removing old peers when number of known peers drops below that many.
ec.minNumberOfKnownPeers=1000
# Peer networking connect timeout for outgoing connections.
ec.connectTimeout=10000
# Peer networking read timeout for outgoing connections.
ec.readTimeout=20000
# Peer networking server idle timeout, milliseconds.
ec.peerServerIdleTimeout=30000
# Use WebSocket connection if supported by the remote peer.
ec.useWebSockets=true
# WebSocket connection idle timeout (milliseconds).
ec.webSocketIdleTimeout=900000
# Use the peer hallmark to only connect with peers above the defined push/pull hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark weight, so connecting to any of your peers becomes equally likely.
ec.enableHallmarkProtection=true
# Hallmark threshold to use when sending data to peers.
ec.pushThreshold=0
# Hallmark threshold to use when requesting data from peers.
ec.pullThreshold=0
# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
ec.blacklistingPeriod=600000
# Consider a new transactionImpl or block sent after 10 peers have received it.
ec.sendToPeersLimit=10
# Enable the Jetty Denial of Service Filter for the peer networking server.
ec.enablePeerServerDoSFilter=true
# Compress Http responses for the peer networking server.
ec.enablePeerServerGZIPFilter=true
# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing only.
# When using testnet, all custom port settings will be ignored, and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will be used.
ec.isTestnet=false
# Save known peers in the database
ec.savePeers=true
# Set to false to disable use of the peers database and the default initial peers.
# This will not delete saved peers.
ec.usePeersDb=true
# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or wellKnownPeers.
ec.getMorePeers=true
# Set to true to run offline - do not connect to peers and do not listen for incoming peer connections.
# This is equivalent to setting ec.shareMyAddress=false, ec.wellKnownPeers=, ec.testnetPeers= and ec.usePeersDb=false, and if set to true overrides those properties.
ec.isOffline=false
# Ignore peer announced addresses. Do not change unless you understand what it does.
ec.ignorePeerAnnouncedAddress=false
# Only allow peer addresses starting with "fc".
# This is for users of cjdns only,do not set if you don't know what that is.
ec.cjdnsOnly=false
# Do not include exception details when returning error response to peers.
ec.hideErrorDetails=false
#### API SERVER ####
# Accept http/json API requests.
ec.enableAPIServer=true
# Hosts from which to allow http/json API requests, if enabled. Set to * to allow all.
# Can also specify networks in CIDR notation, e.g. 192.168.10.198/24
ec.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];
# Port for http/json API requests.
ec.apiServerPort=7876
# Port for https/json API request. If same as ec.apiServerPort,
# the ec.apiSSL setting determines whether SSL is used or not.
ec.apiServerSSLPort=7876
# Enable UPnP for the API ports.
ec.enableAPIUPnP=false
# Host interface on which to listen for http/json API request, default localhost only.
# Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces, including IPv6.
ec.apiServerHost=127.0.0.1
# Idle timeout for http/json API request connections, milliseconds.
ec.apiServerIdleTimeout=30000
# Directory with html and javascript files for the new client UI, and admin tools utilizing the http/json API.
ec.apiResourceBase=html/www
# Default page for the API server.
ec.apiWelcomeFile=index.html
# Java API documentation directory, optional.
ec.javadocResourceBase=html/doc
# Enable Cross Origin Filter for the API server.
ec.apiServerCORS=true
# Add X-Frame-Options SAMEORIGIN header to every response as a protection against clickjacking.
ec.apiFrameOptionsSameOrigin=true
# Enable SSL for the API server (also need to set ec.keyStorePath and ec.keyStorePassword).
# Non-SSL connections will be disabled if ec.apiServerSSLPort is equal to ec.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
ec.apiSSL=false
# Enforce requests that require POST to only be accepted when submitted as POST.
ec.apiServerEnforcePOST=true
# Compress Http responses for the API server.
ec.enableAPIServerGZIPFilter=false
# Password that should be provided when executing protected (administrative) API requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server only listens on the localhost interface, i.e. when ec.apiServerHost=127.0.0.1.
ec.adminPassword=
# Set to true to disable the password protection for admin API requests even when API server is publicly accessible. Not recommended.
ec.disableAdminPassword=false
# The maximum number of records possible to retrieve with a single request.
# This restriction is not enforced if the admin password is provided, or is not needed (disabled or listening on localhost only).
ec.maxAPIRecords=100
# API event registration timeout (seconds). The timeout is reset each time an event wait request is received from the application. The minimum value is 15 seconds.
ec.apiEventTimeout=300
# Maximum number of applications with active event registrations.
ec.apiMaxEventUsers=32
# If an unsigned transactionImpl is submitted with insufficient fee, set the fee to the minimum fee calculated for this transactionImpl instead, as if feeNQT=0 has been specified. Default is false.
ec.correctInvalidFees=false
# APIs to disable, as a semicolon separated list.
ec.disabledAPIs=
# Groups of APIs to disable, as a semicolon separated list of API tag names.
ec.disabledAPITags=
# Enables the API proxy. Requests are forwarded to a randomly chosen peer providing openAPI service. Outgoing transactions are signed locally - the secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
ec.enableAPIProxy=true
# Operate as light client.
# Blockchain is not downloaded and processed, instead the API proxy is used (see ec.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do have their API publicly accessible.
ec.isLightClient=false
# If set, all requests will be forwarded to the specified openAPI peer
ec.forceAPIProxyServerURL=
# The period remote API servers are blacklisted when not functioning (in milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting if a peer is blacklisted, it won't be used by the proxy,
# but it is possible that a peer is online and correctly functioning, and only its open API is blocked (e.g. by firewall)
ec.apiProxyBlacklistingPeriod=1800000
#### OLD NRS USER INTERFACE ####
# Enable the deprecated NRS user interface.
ec.enableUIServer=true
# Hosts from which to allow NRS user interface requests, if enabled. Set to * to allow all.
ec.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];
# Port for NRS user interface server.
ec.uiServerPort=7875
# Host interface for NRS user interface server, default localhost only. Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
ec.uiServerHost=127.0.0.1
# Idle timeout for NRS user interface server, milliseconds.
ec.uiServerIdleTimeout=30000
# Directory with html and javascript files for the NRS client user interface.
ec.uiResourceBase=html/nrs
# Enable Cross Origin Filter for NRS user interface server.
ec.uiServerCORS=false
# Enable SSL for the NRS user interface (also need to set ec.keyStorePath and ec.keyStorePassword).
ec.uiSSL=false
# Enforce requests that require POST to only be accepted when submitted as POST.
ec.uiServerEnforcePOST=true
#### DEBUGGING ####
# Jetty logging is now specified in logging properties.
# Used for debugging peer to peer communications.
ec.communicationLoggingMask=0
# Track balances of the following accounts and related events for debugging purposes.
ec.debugTraceAccounts=
# File name for logging tracked account balances.
ec.debugTraceLog=ec-trace.csv
# Separator character for trace log.
ec.debugTraceSeparator=\t
# Quote character for trace log.
ec.debugTraceQuote="
# Log changes to unconfirmed balances.
ec.debugLogUnconfirmed=false
#### DATABASE ####
ec.dbType=h2
ec.dbDir=./ec_db/ec
ec.dbUrl=jdbc:h2:./ec_db/ec;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
ec.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
ec.dbUsername=sa
ec.dbPassword=sa
# Database connection timeout in seconds.
ec.dbLoginTimeout=70
# Database default lock timeout in seconds.
ec.dbDefaultLockTimeout=60
# Database max memory rows limit.
ec.dbMaxMemoryRows=1000000
# Maximum simultaneous database connections.
ec.maxDbConnections=30
# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB or less, to a maximum of 256MB for heap sizes 640MB or higher.
ec.dbCacheKB=0
# Enable trimming of derived objects tables. Disabling this will significantly worsen performance.
ec.trimDerivedTables=true
# If trimming is enabled, maintain enough previous height records to allow rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for the previously trimmed records to be re-created and preserved.
ec.maxRollback=800
# When trimming is enabled, it is run every ec.trimFrequency blocks.
ec.trimFrequency=1000
# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum required lifetime of two weeks (1209600 seconds) on mainnet,
# or 24 hours (86400 seconds) on testnet. Default is 90 days.
ec.maxPrunableLifetime=7776000
# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, ec.maxPrunableLifetime must be -1 and ec.includeExpiredPrunable must be true.
# The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
ec.includeExpiredPrunable=true
# Threshold for logging database statements (milliseconds).
ec.statementLogThreshold=10000
# Threshold for logging database transactions (milliseconds).
ec.transactionLogThreshold=15000
# Log the average transactionImpl time after this many minutes.
ec.transactionLogInterval=15
# Public keys are by default cached, which consumes 10-15 MB of memory.
ec.enablePublicKeyCache=true

#### Blocks and transactions ####
# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at most 15 s timestamp difference from the block they can be included in.
ec.forgingDelay=20
# Generate and submit the next block before its hit time in response to receiving a lower difficulty block. Submitting the block more than 15 s before its time however will lead to its rejection.
ec.forgingSpeedup=3
# Maximum number of forging accounts allowed on this node.
ec.maxNumberOfForgers=100
# Enable re-broadcasting of new transactions until they are received back from at least one peer, or found in the blockchain.
# This feature can optionally be disabled, to avoid the risk of revealing that this node is the submitter of such re-broadcasted new transactions.
ec.enableTransactionRebroadcasting=true
# Do not allow the number of unconfirmed transactions in memory to exceed this value.
# If exceeded, the same transactionImpl ordering as when choosing which transactions to include in a forged block is used to decide which to keep in the unconfirmed pool.
# Set to 0 or negative for no limit.
ec.maxUnconfirmedTransactions=2000
# Maximum number of account monitors allowed on this node
ec.maxNumberOfMonitors=100

#### DESKTOP WALLET ####
# When using desktop mode and when user interface is available. Launch the wallet inside a desktop frame when the node is started.
ec.launchDesktopApplication=true

#### ACCOUNT LEDGER ####
# Address of accounts (in RS format) to track balance changes in the ledger table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable the account ledger.
ec.ledgerAccounts=*
# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to log only unconfirmed changes.
ec.ledgerLogUnconfirmed=2
# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
ec.ledgerTrimKeep=30000

#### VOTING SYSTEM ####
# If disabled, polls are not processed at finish height and results are not stored in the database. When requested, poll results will be calculated on-the-fly, if the votes are still available.
ec.processPolls=true

#### MINT ####
# Address of the EC server to which the mint worker submits its transactions (default: localhost).
ec.mint.serverAddress=
# Use Https when connecting to the server. Note that mint worker accepts any SSL certificate as valid,
# without checking hostname or certificate authority, therefore this will not protect you against a man-in-the-middle attack when submitting mint transactions.
ec.mint.useHttps=false
# Specify a mintable currency code.
ec.mint.currencyCode=av
# Secret phrase for the minting account, this secret phrase is sent to the host specified by ec.mint.serverAddress therefore do not specify secret phrase of an account with lots of funds.
ec.mint.secretPhrase=
# Number of units to mint per transactionImpl. The minting difficulty grows linearly with the number of units per mint.
ec.mint.unitsPerMint=1
# The initial nonce used for minting. Set to 0 to start with a random nonce.
ec.mint.initialNonce=0
# Number of concurrency threads used for minting. Set to 0 allocate one thread per processor core.
ec.mint.threadPoolSize=0
# When set to false mint transactions are not submitted when a hash is solved. Set this value to true to perform actual minting.
ec.mint.isSubmitted=false
# When set to false the mint worker will resume operation even in case a mint transactionImpl has returned an error response.
ec.mint.stopOnError=false

#### Shuffling ####
# Delete finished shufflings and their participants.
# When enabled, records of completed shufflings and their participants are deleted after the shuffling has finished, which will improve performance by keeping their tables smaller.
ec.deleteFinishedShufflings=false
# Use strong secure random implementation. As this can block on unix systems, it is disabled by default. Enable only if using haveged or other entropy source that makes reading from /dev/random fast,
# otherwise server-side encryption will be unusably slow and cause coin shufflings to fail.
ec.useStrongSecureRandom=false
# Maximum number of shufflers allowed to run at the same time on this node.
ec.maxNumberOfShufflers=100
#### JETTY ####
# Settings for the Jetty Denial Of Service Filter, used for the peer networking server only.
ec.peerServerDoSFilter.maxRequestsPerSec=30
ec.peerServerDoSFilter.delayMs=1000
ec.peerServerDoSFilter.maxRequestMs=300000
# keystore file and password, required if uiSSL or apiSSL are enabled.
ec.keyStorePath=keystore
ec.keyStorePassword=password
# keystore type defaults to JKS can be changed to PKCS12.
ec.keyStoreType=JKS
#### Developers only ####
# Force re-validation of blocks and transactionImpl at start.
ec.forceValidate=false
# Force re-build of derived objects tables at start.
ec.forceScan=false
# NRS normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
ec.disableSecurityPolicy=false
# NRS version.
ec.version=1.0.0
#